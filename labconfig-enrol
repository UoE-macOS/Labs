#!/bin/bash

###################################################################
#
# This script is run at enrollmentcomplete on LAB machines.
# We assume that the quickadd package is being run by a user who
# may or may not be the intended primary user of the machine.
#
# The name is looked up in our network database and set. Then used to define the correct
# local admin account.
# There is a policy of (LCFG and) Application deletion, which excludes the apps built-in on macOS.
# A daemon is generated to complete the install by calling our core-apps trigger.
# Finally the OS is upgraded to the new supported version, this will trigger a restart.
#
# Date: "Tue 16 Jul 2019 15:56:29 BST"
# Version: 0.2.5
# Origin: https://github.com/UoE-macOS
# Released by JSS User: dsavage
#
##################################################################

KRB_REALM='ED.AC.UK'
EDLAN_DB="https://www.edlan-db.ucs.ed.ac.uk/webservice/pie.cfm"
LOCK_FILE="/var/run/UoEQuickAddRunning"
JSS_URL="$(defaults read /Library/Preferences/com.jamfsoftware.jamf.plist jss_url)"

check_jss_available() {
  # Can we see the JSS?
  logger "$0: Checking JSS availability for $JSS_URL"
  curl -I ${JSS_URL} &> /dev/null
  jss_status=$?

  if [ ${jss_status} -ne 0 ]
  then
    echo "Can't contact JSS at ${JSS_URL}"
    echo "Error status was: ${jss_status}"
    echo "Please contact support"
    exit 1
  else
    true
  fi
} 


delete_apps() {
if [ $dialogue == "YES" ]; then
	# Display a message in the background...
	/Library/Application\ Support/JAMF/bin/jamfHelper.app/Contents/MacOS/jamfHelper\
 -windowType utility\
 -title 'UoE Mac Supported Desktop'\
 -heading 'Removing Previously Installed Apps'\
 -icon '/System/Library/CoreServices/Installer.app/Contents/Resources/Installer.icns'\
 -timeout 99999\
 -description "$(echo -e We are removing the previously installed apps.\\n\\nThis will take several minutes.\\nPlease do not restart your computer)" &
	/usr/local/bin/jamf policy -event Delete-Apps
	killall jamfHelper
else
/usr/local/bin/jamf policy -event Delete-Apps
fi
}

bind_ad() {
/usr/local/bin/jamf policy -event Bind-AD
}

generate_code() {

# These may not exist yet, so just make them.
mkdir /Library/MacSD
mkdir /Library/MacSD/Scripts

# Generate script, this will trigger the Core-Apps and remove itself.
/bin/echo "#!/bin/bash

trigger_core_apps() {
if [ $dialogue == "YES" ]; then
	# Display this message but send the jamfhelper process into the background
	# so that execution continues
	/Library/Application\ Support/JAMF/bin/jamfHelper.app/Contents/MacOS/jamfHelper\
 -windowType utility\
 -title 'UoE Mac Supported Desktop'\
 -heading 'Checking Core Applications'\
 -icon '/System/Library/CoreServices/Installer.app/Contents/Resources/Installer.icns'\
 -timeout 99999\
 -description 'We are ensuring that your core applications are installed and up-to-date.' &
	/usr/local/bin/jamf policy -event Core-Apps
	killall jamfHelper
else
	/usr/local/bin/jamf policy -event Core-Apps
fi
}

trigger_oa_apps() {
if [ $dialogue == "YES" ]; then
	# Display this message but send the jamfhelper process into the background
	# so that execution continues
	/Library/Application\ Support/JAMF/bin/jamfHelper.app/Contents/MacOS/jamfHelper\
 -windowType utility\
 -title 'UoE Mac Supported Desktop'\
 -heading 'Checking OA Applications'\
 -icon '/System/Library/CoreServices/Installer.app/Contents/Resources/Installer.icns'\
 -timeout 99999\
 -description 'We are ensuring that the open access applications are installed and up-to-date.' &
	/usr/local/bin/jamf policy -event OA-Apps
	killall jamfHelper
else
	/usr/local/bin/jamf policy -event OA-Apps
fi
}

trigger_sch_apps() {
if [ $dialogue == "YES" ]; then
	# Display this message but send the jamfhelper process into the background
	# so that execution continues
	/Library/Application\ Support/JAMF/bin/jamfHelper.app/Contents/MacOS/jamfHelper\
 -windowType utility\
 -title 'UoE Mac Supported Desktop'\
 -heading 'Checking School Applications'\
 -icon '/System/Library/CoreServices/Installer.app/Contents/Resources/Installer.icns'\
 -timeout 99999\
 -description 'We are ensuring that your school applications are installed and up-to-date.' &
	/usr/local/bin/jamf policy -event Sch-Apps
	killall jamfHelper
else
	/usr/local/bin/jamf policy -event Sch-Apps
fi
}

trigger_vcpod_apps() {
if [ $dialogue == "YES" ]; then
	# Display this message but send the jamfhelper process into the background
	# so that execution continues
	/Library/Application\ Support/JAMF/bin/jamfHelper.app/Contents/MacOS/jamfHelper\
 -windowType utility\
 -title 'UoE Mac Supported Desktop'\
 -heading 'Checking VCPod Applications'\
 -icon '/System/Library/CoreServices/Installer.app/Contents/Resources/Installer.icns'\
 -timeout 99999\
 -description 'We are ensuring that your video conferencing applications are installed and up-to-date.' &
	/usr/local/bin/jamf policy -event VCPod-Apps
	killall jamfHelper
else
	/usr/local/bin/jamf policy -event VCPod-Apps
fi
}

# Is there a user logged in
username=`python -c 'from SystemConfiguration import SCDynamicStoreCopyConsoleUser; import sys; username = (SCDynamicStoreCopyConsoleUser(None, None, None) or [None])[0]; username = [username,""][username in [u"loginwindow", None, u""]]; sys.stdout.write(username + "\n");'`

if [ -z "${username}" ]; then
	dialogue="NO"
else
	dialogue="YES"
fi

        
# stop us going to sleep, might need to download lots...
caffeinate -dis &

# Check whether School/dept's local admin account exists and, if not, created it
/usr/local/bin/jamf policy -event Check-Local-Admin

# Run any policies that are triggered by the 'Core-Apps' event  
trigger_core_apps

# Install oa apps
trigger_oa_apps

# Install school apps
trigger_sch_apps

# Install school apps
trigger_vcpod_apps

# Run recon to let the JSS know who the primary user of this machine will be
/usr/local/bin/jamf recon -endUsername LabUser

# Double check the computer name
/usr/local/bin/jamf policy -event Set-Desktop-Name

# Cache offline policies for login items
#/usr/local/bin/jamf policy -event Login
/usr/local/bin/jamf policy -event Dock
/usr/local/bin/jamf policy -event LoginItem

# Force the microsoft update
/usr/local/bin/jamf policy -event MS-UP

# Try removing the diagnostics startup
rm -f /Library/LaunchDaemons/com.apple.installer.osmessagetracing.plist
touch /var/db/.AppleDiagnosticsSetupDone

## Remove LaunchDaemon
/bin/rm -f /Library/LaunchDaemons/ed.jamf.finish_Install.plist
## Remove Script
rm -f /Library/MacSD/Scripts/finish_Install.sh

# Trigger softwareupdate
/usr/sbin/softwareupdate --install --all

shutdown -r now

exit 0" > /Library/MacSD/Scripts/finish_Install.sh

# Set the permission on the file just made.
chmod +x /Library/MacSD/Scripts/finish_Install.sh

cat << EOF > /Library/LaunchDaemons/ed.jamf.finish_Install.plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>ed.jamf.finish_Install</string>
    <key>ProgramArguments</key>
    <array>
        <string>/bin/bash</string>
        <string>-c</string>
        <string>/Library/MacSD/Scripts/finish_Install.sh</string>
    </array>
    <key>RunAtLoad</key>
    <true/>
</dict>
</plist>
EOF

# Set the permission on the file just made.
/usr/sbin/chown root:wheel /Library/LaunchDaemons/ed.jamf.finish_Install.plist
/bin/chmod 644 /Library/LaunchDaemons/ed.jamf.finish_Install.plist
}


do_restart () {
username=`python -c 'from SystemConfiguration import SCDynamicStoreCopyConsoleUser; import sys; username = (SCDynamicStoreCopyConsoleUser(None, None, None) or [None])[0]; username = [username,""][username in [u"loginwindow", None, u""]]; sys.stdout.write(username + "\n");'`

if [ -z $username ] || [ "$username" == '' ]; then
	dialogue="NO"
else
	dialogue="YES"
fi
    
if [ $dialogue == "YES" ]; then
/Library/Application\ Support/JAMF/bin/jamfHelper.app/Contents/MacOS/jamfHelper\
  -windowType utility\
  -title 'UoE Mac Supported Desktop'\
  -heading 'Please restart'\
  -icon '/System/Library/CoreServices/Installer.app/Contents/Resources/Installer.icns'\
  -timeout 30\
  -description "$(echo -e Core installation complete.\\n\\n This system will restart in 30 seconds and continue to install the Core Applications.)"

# We are done - delete our lock file
rm "${LOCK_FILE}"
# We didn't give the user a choice, so...
#reboot
shutdown -r now
else
rm "${LOCK_FILE}"
shutdown -r now
fi
}

get_macaddr() {
  active_adapter=`route get ed.ac.uk | grep interface | awk '{print $2}'`
  macaddr=$(ifconfig $active_adapter ether | awk '/ether/ {print $NF}')
  logger "$0: MAC Address: ${macaddr}"
  echo ${macaddr}
}


get_edlan_dnsname() {
  mac=$(get_macaddr)
  if ! [ -z ${mac} ]; then
     #dnsfull=$(curl --insecure "${EDLAN_DB}?MAC=${mac}&return=DNS" 2>/dev/null) *** Comment out to work with 10.13, pending edlan changes.
     dnsfull=`python -c "import urllib2, ssl;print urllib2.urlopen('${EDLAN_DB}?MAC=${mac}&return=DNS', context=ssl._create_unverified_context()).read()"`
     # Remove anything potentially dodgy 
     dnsname=`echo ${dnsfull} | awk -F "." '{print $1}'`
     echo ${dnsname}
  fi
  logger "$0: DNS Name: ${dnsname}"
}

set_computer_name() {
  name=$(get_edlan_dnsname)
  /usr/sbin/scutil --set LocalHostName $( echo "${name}" | awk -F '.' '{print $1}' )
  /usr/sbin/scutil --set ComputerName "${name}"
  /usr/sbin/scutil --set HostName "${name}"
  # Set the NetBIOS name
  defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string "${name}"
  # Check name is right
  livename=`/usr/sbin/scutil --get ComputerName`
  if [ $livename == $name ]; then
  	logger "$0: Set machine name to ${name}"
 else
 	# If we don't get a name for some reason, first try a dig to get the dns name.
    ip_address=`ipconfig getifaddr en0`
    name=`dig +short -x ${ip_address} | awk -F '.' '{print $1}'`
    /usr/sbin/scutil --set LocalHostName "${name}"
    /usr/sbin/scutil --set ComputerName "${name}"
    /usr/sbin/scutil --set HostName "${name}"
     # Set the NetBIOS name
	defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string "${name}"
 fi
 if [ -z ${name} ]; then
 	# Fall through to the naming script to try setting a sensible value
 	/usr/local/bin/jamf policy -event Set-Desktop-Name
 fi
}

# First check we can contact the JSS
check_jss_available
# stop us going to sleep, might need to download the OS installer
caffeinate -dis &

# Drop a lock file so that other processes know
# we are running

touch "${LOCK_FILE}"

# Give time for setup utility to start if it's going to
sleep 60 

# Is there a user logged in
username=`python -c 'from SystemConfiguration import SCDynamicStoreCopyConsoleUser; import sys; username = (SCDynamicStoreCopyConsoleUser(None, None, None) or [None])[0]; username = [username,""][username in [u"loginwindow", None, u""]]; sys.stdout.write(username + "\n");'`

echo "User is: ${username}"

if [ -z "${username}" ]; then
	export USER_IS_MBSETUPUSER=false
	dialogue="NO"
elif [ "${username}" == "_mbsetupuser" ]; then
	# We are running on top of the setup app
    export USER_IS_MBSETUPUSER=true
    dialogue="NO"
else
	export USER_IS_MBSETUPUSER=false
	dialogue="YES"
fi

if [ -f "/Library/MacSD/.UoECleanBuildRequested" ]
# Has a clean build been requested? If so, just do it.
# this should start a clean build and reboot the machine.
then
    echo "Clean build requested. Invoking clean build policy"
	/usr/local/bin/jamf policy -event clean-build-lab
else
	if ${USER_IS_MBSETUPUSER}
    then
		# We are on top of the setup programme, so throw up a fullscreen thingie
    	/Library/Application\ Support/JAMF/bin/jamfHelper.app/Contents/MacOS/jamfHelper\
  		-windowType fs\
  		-title 'UoE Mac Supported Desktop'\
  		-heading 'Completing system installation.'\
  		-icon '/System/Library/CoreServices/Installer.app/Contents/Resources/Installer.icns'\
  		-description 'Please use another computer.' &
	fi
fi

# If we have got this far, make sure the user doesn't see the setup utility
touch /var/db/.AppleSetupDone
touch /var/db/.AppleDiagnosticsSetupDone

# And set locale appropriately
defaults write NSGlobalDomain AppleLanguages "(en-GB)"
defaults write NSGlobalDomain AppleLocale "en_GB"

#enabling location services
/usr/bin/defaults write /var/db/locationd/Library/Preferences/ByHost/com.apple.locationd LocationServicesEnabled -int 1

uuid=/usr/sbin/system_profiler SPHardwareDataType | grep "Hardware UUID" | cut -c22-57
/usr/bin/defaults write /var/db/locationd/Library/Preferences/ByHost/com.apple.locationd.$uuid LocationServicesEnabled -int 1

#configure automatic timezone
/usr/bin/defaults write /Library/Preferences/com.apple.timezone.auto Active -bool YES
/usr/bin/defaults write /private/var/db/timed/Library/Preferences/com.apple.timed.plist TMAutomaticTimeOnlyEnabled -bool YES
/usr/bin/defaults write /private/var/db/timed/Library/Preferences/com.apple.timed.plist TMAutomaticTimeZoneEnabled -bool YES

/usr/sbin/systemsetup -setusingnetworktime on
/usr/sbin/systemsetup -gettimezone
/usr/sbin/systemsetup -getnetworktimeserver


# What OS is running?
osversion=`sw_vers -productVersion | awk -F . '{print $2}'`

# Set the computers name
set_computer_name

# Check whether School/dept's local admin account exists and, if not, created it
/usr/local/bin/jamf policy -event Check-Local-Admin

# Delete the existing app set on the mac
delete_apps

# Sleep here
sleep 5

# Report the status now apps are removed
/usr/local/bin/jamf recon

# Generate script and daemon, this will trigger the Core-Apps and remove itself.
generate_code

# OS version on the Mac
osversion=`sw_vers -productVersion | awk -F . '{print $2}'`

# Run any policies that are triggered by the 'OS-Installer' event  (do this last)
free_space=`diskutil info / | grep "Free Space" | awk '{print $4}' | awk -F "." '{print $1}'`

if [ $osversion == "13" ] || [ $osversion == "14" ] || [ $osversion == "15" ]; then
	logger "$0: OS on version 10.13 or 10.14 already."
else
	if [ $free_space -ge 25 ]; then
	    rm -f "${LOCK_FILE}"
		trigger_os_installer
	else
	    logger "$0: Not enough free disk space to continue"
	fi
fi


case "$osversion" in
"13")
	do_restart
	;;

"14")
	do_restart
	;;
    
"15")
	do_restart
	;;
    
*)
	if [ $free_space -ge 25 ]; then
    	# Delete then Download a fresh OS installer
    	rm -fR "/Applications/Install macOS High Sierra.app"
      	rm -fR "/Applications/Install macOS Mojave.app"
    	/usr/local/bin/jamf policy -event macOS-Installer
	else
    	do_restart
	fi
    ;;
esac


exit 0;
